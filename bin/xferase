#!/usr/bin/env ruby
# frozen_string_literal: true

# Config -----------------------------------------------------------------------
require 'xferase'
require 'photein'

Xferase::Config.parse_opts!
Xferase.logger.open

Photein::Config.set(
  'library-desktop': Xferase::Config.library,
  'library-web': Xferase::Config.library_web,
)
Photein.logger = Xferase.logger

ENV['MEDIAINFO_XML_PARSER'] ||= 'nokogiri'

FORMAT_GROUPS = [%w(.jpg .dng), %w(.heic), %w(.mov .mp4), %w(.png)]

# Setup ------------------------------------------------------------------------
require 'debouncer'
require 'fileutils'
require 'pathname'
require 'rb-inotify'
require 'tmpdir'

%i[inbox library library_web]
  .map { |dir| Xferase::Config.send(dir) }
  .compact
  .reject(&File.method(:directory?))
  .each do |dir|
    Xferase.logger.info("#{dir}: not found; creating now...")
    FileUtils.mkdir_p(dir)
  end

Thread.abort_on_exception = true

# Helper methods ---------------------------------------------------------------
def import(file)
  file = case file
         when INotify::Event
           Pathname(file.absolute_name)
         else
           Pathname(file)
         end.cleanpath

  opts = Xferase::Config.extract_photein_opts(file)

  return unless file.exist?
  return if file.basename.fnmatch?('.*')
  return if file.dirname.join(".syncthing.#{file.basename}.tmp").exist?

  Xferase.logger.debug("#{file.basename}: new file detected in watch directory; importing...")

  Photein::MediaFile.for(file, opts: opts)&.import ||
    Xferase.logger.debug("#{file.basename}: unrecognized media type")
rescue => e
  warn e.message
end

def sync_deletions(event)
  return if event.name.empty?

  Xferase.logger.info("#{event.name} has disappeared!")

  deleted_file   = Pathname(event.absolute_name).expand_path

  sister_file    = if deleted_file.to_s.start_with?(File.expand_path(Xferase::Config.library))
                    deleted_file.sub(Xferase::Config.library, Xferase::Config.library_web)
                  else
                    deleted_file.sub(Xferase::Config.library_web, Xferase::Config.library)
                  end

  sister_formats = FORMAT_GROUPS.find { |group| group.include?(deleted_file.extname) }

  related_files  = [deleted_file, sister_file]
    .product(sister_formats)
    .map { |file, ext| file.sub_ext(ext) }
    .select(&:file?)

  # (Why mv to tmpdir first? Why not rm straight away?
  # Because rm would recursively trigger this inotify callback.)
  related_files.each { |f| Xferase.logger.info("deleting #{f.realpath}") }
  FileUtils.mv(related_files, Dir.tmpdir)
  FileUtils.rm(related_files.map { |f| File.join(Dir.tmpdir, f.basename) })
end

# Resume from interruption/failure ---------------------------------------------
Dir["#{Xferase::Config.inbox}/**/*"].sort
  .select(&File.method(:file?))
  .each(&method(:import))

# Start ------------------------------------------------------------------------
Thread.new do
  INotify::Notifier.new.tap do |import_notifier|
    import_notifier.watch(Xferase::Config.inbox, :close_write, &method(:import))

    # NOTE: inotify is not recursive,
    # so subdirectories must be watched separately!
    # (Why do Syncthing folders get special treatment?
    # Because ST works by creating hidden tempfiles and moving them upon completion)
    stfolders, simple_subdirs = Dir["#{Xferase::Config.inbox}/**/*"]
      .select(&File.method(:directory?))
      .partition { |dir| Dir.children(dir).include?('.stfolder') }

    simple_subdirs.each { |dir| import_notifier.watch(dir, :close_write, &method(:import)) }
    stfolders.each { |dir| import_notifier.watch(dir, :moved_to, &method(:import)) }
  end.run
end

Thread.new do
  INotify::Notifier.new.tap do |deletion_notifier|
    # NOTE: inotify is not recursive,
    # so subdirectories must be watched separately!
    (Dir["#{Xferase::Config.library}/**/*"] + Dir["#{Xferase::Config.library_web}/**/*"])
      .select(&File.method(:directory?))
      .each { |dir| deletion_notifier.watch(dir, :delete, &method(:sync_deletions)) }
  end.run
end.join
